%!PS-Adobe-3.0
%%Title: brat.pro
%%For: ivan
%%Creator: VIM - Vi IMproved 7.4 (2013 Aug 10)
%%CreationDate: Mon Jun  6 14:49:47 2016
%%DocumentData: Clean8Bit
%%Orientation: Portrait
%%Pages: (atend)
%%PageOrder: Ascend
%%BoundingBox: 61 42 577 752
%%DocumentMedia: letter 612 792 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-Oblique
%%+ font Courier-BoldOblique
%%DocumentSuppliedResources: procset VIM-Prolog 1.4 1
%%+ encoding VIM-latin1 1.0 0
%%Requirements: duplex collate color
%%EndComments
%%BeginDefaults
%%PageResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-Oblique
%%+ font Courier-BoldOblique
%%PageMedia: letter
%%EndDefaults
%%BeginProlog
%%BeginResource: procset VIM-Prolog
%%BeginDocument: /usr/share/vim/vim74/print/prolog.ps
%!PS-Adobe-3.0 Resource-ProcSet
%%Title: VIM-Prolog
%%Version: 1.4 1
%%EndComments
% Editing of this file is NOT RECOMMENDED.  You run a very good risk of causing
% all PostScript printing from VIM failing if you do.  PostScript is not called
% a write-only language for nothing!
/packedarray where not{userdict begin/setpacking/pop load def/currentpacking
false def end}{pop}ifelse/CP currentpacking def true setpacking
/bd{bind def}bind def/ld{load def}bd/ed{exch def}bd/d/def ld
/db{dict begin}bd/cde{currentdict end}bd
/T true d/F false d
/SO null d/sv{/SO save d}bd/re{SO restore}bd
/L2 systemdict/languagelevel 2 copy known{get exec}{pop pop 1}ifelse 2 ge d
/m/moveto ld/s/show ld /ms{m s}bd /g/setgray ld/r/setrgbcolor ld/sp{showpage}bd
/gs/gsave ld/gr/grestore ld/cp/currentpoint ld
/ul{gs UW setlinewidth cp UO add 2 copy newpath m 3 1 roll add exch lineto
stroke gr}bd
/bg{gs r cp BO add 4 -2 roll rectfill gr}bd
/sl{90 rotate 0 exch translate}bd
L2{
/sspd{mark exch{setpagedevice}stopped cleartomark}bd
/nc{1 db/NumCopies ed cde sspd}bd
/sps{3 db/Orientation ed[3 1 roll]/PageSize ed/ImagingBBox null d cde sspd}bd
/dt{2 db/Tumble ed/Duplex ed cde sspd}bd
/c{1 db/Collate ed cde sspd}bd
}{
/nc{/#copies ed}bd
/sps{statusdict/setpage get exec}bd
/dt{statusdict/settumble 2 copy known{get exec}{pop pop pop}ifelse
statusdict/setduplexmode 2 copy known{get exec}{pop pop pop}ifelse}bd
/c{pop}bd
}ifelse
/ffs{findfont exch scalefont d}bd/sf{setfont}bd
/ref{1 db findfont dup maxlength dict/NFD ed{exch dup/FID ne{exch NFD 3 1 roll
put}{pop pop}ifelse}forall/Encoding findresource dup length 256 eq{NFD/Encoding
3 -1 roll put}{pop}ifelse NFD dup/FontType get 3 ne{/CharStrings}{/CharProcs}
ifelse 2 copy known{2 copy get dup maxlength dict copy[/questiondown/space]{2
copy known{2 copy get 2 index/.notdef 3 -1 roll put pop exit}if pop}forall put
}{pop pop}ifelse dup NFD/FontName 3 -1 roll put NFD definefont pop end}bd
CP setpacking
(\004)cvn{}bd
% vim:ff=unix:
%%EOF
%%EndDocument
%%EndResource
%%BeginResource: encoding VIM-latin1
%%BeginDocument: /usr/share/vim/vim74/print/latin1.ps
%!PS-Adobe-3.0 Resource-Encoding
%%Title: VIM-latin1
%%Version: 1.0 0
%%EndComments
/VIM-latin1[
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quotesingle
/parenleft /parenright /asterisk /plus /comma /minus /period /slash
/zero /one /two /three /four /five /six /seven
/eight /nine /colon /semicolon /less /equal /greater /question
/at /A /B /C /D /E /F /G
/H /I /J /K /L /M /N /O
/P /Q /R /S /T /U /V /W
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
/grave /a /b /c /d /e /f /g
/h /i /j /k /l /m /n /o
/p /q /r /s /t /u /v /w
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /periodcentered
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis]
/Encoding defineresource pop
% vim:ff=unix:
%%EOF
%%EndDocument
%%EndResource
%%EndProlog
%%BeginSetup
612 792 0 sps
1 nc
T F dt
T c
%%IncludeResource: font Courier
/_F0 /VIM-latin1 /Courier ref
/F0 10 /_F0 ffs
%%IncludeResource: font Courier-Bold
/_F1 /VIM-latin1 /Courier-Bold ref
/F1 10 /_F1 ffs
%%IncludeResource: font Courier-Oblique
/_F2 /VIM-latin1 /Courier-Oblique ref
/F2 10 /_F2 ffs
%%IncludeResource: font Courier-BoldOblique
/_F3 /VIM-latin1 /Courier-BoldOblique ref
/F3 10 /_F3 ffs
/UO -1 d
/UW 0.5 d
/BO -2.5 d
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
0 g
(brat.pro                                                                        Page 1)61.2 744.9 ms
F0 sf
0 0.125 0.251 r
(PRO )61.2 724.9 ms
0 g
(BRAT)s
0.251 0.251 0 r
(;; These variables are used to calculate branching ratios)61.2 704.9 ms
0 g
(dxl=)61.2 684.9 ms
0 0.251 0 r
(1)s
0 g
(            )s
0.251 0.251 0 r
(; level we are exciting from)s
0 g
(dxu=)61.2 674.9 ms
0 0.251 0 r
(2)s
0 g
(            )s
0.251 0.251 0 r
(; level we are exciting to)s
0 g
(zzero=)61.2 664.9 ms
0 0.251 0 r
(1e-10)s
0 g
(      )s
0.251 0.251 0 r
(; floor. used as a tolerance setting)s
0 g
(last_level = )61.2 654.9 ms
0 0.251 0 r
(57)s
0 g
(  )s
0.251 0.251 0 r
(; number of the last level in the adf04 file.)s
0 0.251 0 r
(read)61.2 634.9 ms
0 g
(, dxl, )s
0.376 0 0.376 r
(prompt=)s
0 0.251 0 r
('Enter lower level: ')s
0 g
(, )s
0.376 0 0.376 r
(format =)s
0 g
( )s
0 0.251 0 r
('\(i2\)')s
(read)61.2 624.9 ms
0 g
(, dxu, )s
0.376 0 0.376 r
(prompt=)s
0 0.251 0 r
('Enter upper level: ')s
0 g
(, )s
0.376 0 0.376 r
(format =)s
0 g
( )s
0 0.251 0 r
('\(i2\)')s
(read)61.2 614.9 ms
0 g
(, last_level, )s
0.376 0 0.376 r
(prompt=)s
0 0.251 0 r
('Enter total # of levels in adf04: ')s
0 g
(, )s
0.376 0 0.376 r
(format =)s
0 g
( )s
0 0.251 0 r
('\(i2\)')s
0.251 0.251 0 r
(;; Lines 11 through 35 pull out indx values for dstgsig)61.2 594.9 ms
(;; this part of the code is straight from Stuart)61.2 584.9 ms
0 g
(indx_init=dxl-)61.2 574.9 ms
0 0.251 0 r
(1.0)s
0 g
(indx_col=indx_init*\(last_level-)61.2 564.9 ms
0 0.251 0 r
(1)s
0 g
(\)-\(indx_init*\(indx_init-)s
0 0.251 0 r
(1.0)s
0 g
(\)\)/)s
0 0.251 0 r
(2.)s
0 g
( +)s
0 0.251 0 r
(1.)s
0 g
(indx_trans=indx_col+\(dxu-dxl\)-)61.2 554.9 ms
0 0.251 0 r
(1.)s
0 g
(indx_init=indx_init+)61.2 544.9 ms
0 0.251 0 r
(1.0)s
0 g
(indx_trans_final=indx_init*\(last_level-)61.2 534.9 ms
0 0.251 0 r
(1)s
0 g
(\)-\(indx_init*\(indx_init-)s
0 0.251 0 r
(1.0)s
0 g
(\)\)/)s
0 0.251 0 r
(2.)s
0.251 0.251 0 r
(;print,'indx_col,=',fix\(indx_trans\))61.2 524.9 ms
(;print,'NTRMN=',fix\(indx_trans\))61.2 514.9 ms
(;print,'NTRANS=',fix\(indx_trans_final\))61.2 504.9 ms
0 g
(read_adf04,)61.2 484.9 ms
0.376 0 0.376 r
(file=)s
0 0.251 0 r
('adf04_NIST')s
0 g
(,)s
0.376 0 0.376 r
(fulldata=)s
0 g
(data)s
0 0.251 0 r
(openw)61.2 464.9 ms
0 g
(,)s
0 0.251 0 r
(2)s
0 g
(,)s
0 0.251 0 r
('dstgsg_indx_vals')s
0 0.125 0.251 r
(for)61.2 454.9 ms
0 g
( i=dxu+)s
0 0.251 0 r
(1)s
0 g
(,)s
0 0.251 0 r
(n_elements)s
0 g
(\()s
0.376 0 0.376 r
(data.wa)s
0 g
(\) )s
0 0.125 0.251 r
(do)s
0 g
( )s
0 0.125 0.251 r
(begin)s
0 g
(   indx1=)61.2 444.9 ms
0 0.251 0 r
(where)s
0 g
(\(\()s
0.376 0 0.376 r
(data.lower)s
0 0.125 0.251 r
( eq )s
0 g
(dxu\))s
0 0.125 0.251 r
( and )s
0 g
(\()s
0.376 0 0.376 r
(data.upper)s
0 0.125 0.251 r
( eq )s
0 g
(i\)\))s
(   indx2=)61.2 434.9 ms
0 0.251 0 r
(where)s
0 g
(\()s
0.376 0 0.376 r
(data.upper)s
0 0.125 0.251 r
( eq )s
0 g
(i\))s
(   ratio=)61.2 414.9 ms
0.376 0 0.376 r
(data.aval)s
0 g
([indx1]/)s
0 0.251 0 r
(total)s
0 g
(\()s
0.376 0 0.376 r
(data.aval)s
0 g
([indx2]\))s
(   )61.2 394.9 ms
0 0.251 0 r
(printf)s
0 g
(,)s
0 0.251 0 r
(2)s
0 g
(,ratio,)s
0.376 0 0.376 r
(format=)s
0 0.251 0 r
('\(1e12.4\)')s
0.251 0.251 0 r
(;   print,i,dxu,ratio,format='\(i4,2x,i4,2x,1e12.4\)')61.2 384.9 ms
0 0.125 0.251 r
(endfor)61.2 374.9 ms
0 0.251 0 r
(close)61.2 364.9 ms
0 g
(,)s
0 0.251 0 r
(2)s
0.251 0.251 0 r
(;; the A-value matrix \(aval_mat\) is a 3D array.)61.2 344.9 ms
(;; column1 = lower level)61.2 334.9 ms
(;; column2 = upper level)61.2 324.9 ms
(;; column3 = corresponding A-value)61.2 314.9 ms
0 g
(aval_mat=)61.2 294.9 ms
0 0.251 0 r
(fltarr)s
0 g
(\()s
0 0.251 0 r
(3)s
0 g
(,)s
0 0.251 0 r
(n_elements)s
0 g
(\()s
0.376 0 0.376 r
(data.lower)s
0 g
(\)\))s
(aval_mat\()61.2 284.9 ms
0 0.251 0 r
(0)s
0 g
(,*\)=)s
0.376 0 0.376 r
(data.lower)s
0 g
(aval_mat\()61.2 274.9 ms
0 0.251 0 r
(1)s
0 g
(,*\)=)s
0.376 0 0.376 r
(data.upper)s
0 g
(aval_mat\()61.2 264.9 ms
0 0.251 0 r
(2)s
0 g
(,*\)=)s
0.376 0 0.376 r
(data.aval)s
0.251 0.251 0 r
(;; atot holds the sum of all the A-values below the current level.)61.2 234.9 ms
(;; So atot\(2\) = A_21)61.2 224.9 ms
(;;    atot\(3\) = A_32 + A_31)61.2 214.9 ms
(;;    atot\(4\) = A_43 + A_42 + A_41)61.2 204.9 ms
(;;  And so on.....)61.2 194.9 ms
0 g
(atot=)61.2 174.9 ms
0 0.251 0 r
(dblarr)s
0 g
(\()s
0 0.251 0 r
(n_elements)s
0 g
(\()s
0.376 0 0.376 r
(data.wa)s
0 g
(\)+)s
0 0.251 0 r
(1)s
0 g
(\))s
0 0.125 0.251 r
(for)61.2 154.9 ms
0 g
( i=)s
0 0.251 0 r
(2)s
0 g
(,)s
0 0.251 0 r
(n_elements)s
0 g
(\()s
0.376 0 0.376 r
(data.wa)s
0 g
(\) )s
0 0.125 0.251 r
(do)s
0 g
( )s
0 0.125 0.251 r
(begin)s
0 g
(    indx2=)61.2 144.9 ms
0 0.251 0 r
(where)s
0 g
(\()s
0.376 0 0.376 r
(data.upper)s
0 0.125 0.251 r
( eq )s
0 g
(i\))s
(    atot[i]=)61.2 134.9 ms
0 0.251 0 r
(total)s
0 g
(\()s
0.376 0 0.376 r
(data.aval)s
0 g
([indx2]\))s
0 0.125 0.251 r
(endfor)61.2 124.9 ms
0.251 0.251 0 r
(;; we need a matrix of branching ratios)61.2 104.9 ms
(;; all this block does is take each A-value in aval_mat)61.2 94.9 ms
(;; and multiply it by the sum of all the A-values with)61.2 84.9 ms
(;; upper indices equal or below the current level)61.2 74.9 ms
0 g
(indx2=)61.2 54.9 ms
0 0.251 0 r
(where)s
0 g
(\(aval_mat\()s
0 0.251 0 r
(0)s
0 g
(,*\))s
0 0.125 0.251 r
( ge )s
0 g
(dxu\))s
(ratio_mat=aval_mat\(*,indx2\))61.2 44.9 ms
re sp
%%PageTrailer
%%Page: 2 2
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(brat.pro                                                                        Page 2)61.2 744.9 ms
F0 sf
0 0.125 0.251 r
(for)61.2 714.9 ms
0 g
( i = )s
0 0.251 0 r
(0)s
0 g
(, )s
0 0.251 0 r
(n_elements)s
0 g
(\(ratio_mat\()s
0 0.251 0 r
(0)s
0 g
(,*\)\)-)s
0 0.251 0 r
(1)s
0 g
( )s
0 0.125 0.251 r
(do)s
0 g
( )s
0 0.125 0.251 r
(begin)s
0 g
(        ratio_mat\()61.2 704.9 ms
0 0.251 0 r
(2)s
0 g
(,i\)=ratio_mat\()s
0 0.251 0 r
(2)s
0 g
(,i\) / atot\(ratio_mat\()s
0 0.251 0 r
(1)s
0 g
(,i\)\))s
0 0.125 0.251 r
(endfor)61.2 694.9 ms
0.251 0.251 0 r
(;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;)61.2 674.9 ms
(;;;;;;;;;;;;;;;)61.2 664.9 ms
(;; IMPORTANT !!!!!! At this point we have an array of branching fractions sorted by lo)61.2 654.9 ms
(wer level.)61.2 644.9 ms
(;; This array only contains single jumps, i.e. 10-11, 10-12, 10-14, etc..... As of yet)61.2 634.9 ms
( there are NO)61.2 624.9 ms
(;; multi jump ratios. So no 10-11-14-57, or 10-12-34-56-57 , etc....)61.2 614.9 ms
(;; Our next task is to complete the branches, so if we have a 10-12, find all the frac)61.2 604.9 ms
(tions)61.2 594.9 ms
(;; that start in 12, and then compute the 10-12-?? fractions. Repeat this until we get)61.2 584.9 ms
( all the way)61.2 574.9 ms
(;; to the last level.)61.2 564.9 ms
(;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;)61.2 554.9 ms
(;;;;;;;;;;;;;;;)61.2 544.9 ms
(;; Calculating branching ratios generates extremely small values, which triggers under)61.2 514.9 ms
(flow errors)61.2 504.9 ms
(;; These can be ignored, since we are discarding all ratios below zzero.)61.2 494.9 ms
(;; The following three lines turns off these messages.)61.2 484.9 ms
0 g
(currentExcept =)61.2 464.9 ms
F1 sf
0.251 0.251 0 r
(!Except)s
(!except)61.2 454.9 ms
F0 sf
0 g
( = )s
0 0.251 0 r
(0)s
0 g
(void = )61.2 444.9 ms
0 0.251 0 r
(Check_Math)s
0 g
(\(\))s
0.251 0.251 0 r
(;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;)61.2 424.9 ms
(;;;;;;;;;)61.2 414.9 ms
(;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;)61.2 404.9 ms
(;;;;;;;;)61.2 394.9 ms
(;; This for loop does all the work. We create temporary matrices: temp_mat1,2,3.)61.2 384.9 ms
(;;)61.2 374.9 ms
(;; temp_mat1: at the beginning of each iteration, temp_mat1 pulls out branching ratios)61.2 364.9 ms
(;;            that correspond to the next level up, starting from one level above the)61.2 354.9 ms
(;;            level that we are exciting into.)61.2 344.9 ms
(;;            on the first iteration, it only checks for levels in the ratio_mat matri)61.2 334.9 ms
(x.)61.2 324.9 ms
(;;            for every consecutive iteration it checks ratio_mat and temp_mat3.)61.2 314.9 ms
(;;)61.2 304.9 ms
(;; temp_mat2: stores branching ratios for every level in ratio_mat that has a lower le)61.2 294.9 ms
(vel)61.2 284.9 ms
(;;            corresponding to the upper level stored in temp_mat1. We then use the va)61.2 274.9 ms
(lues)61.2 264.9 ms
(;;            in temp_mat1 and temp_mat2 to calculate branching ratios that go to all )61.2 254.9 ms
(the)61.2 244.9 ms
(;;            upper levels stored in temp_mat2.)61.2 234.9 ms
(;;)61.2 224.9 ms
(;; temp_mat3: at the end of each loop, temp_mat3 stores any branching ratios temp_mat1)61.2 214.9 ms
(;;            will need on the next iteration, if they are above zzero.)61.2 204.9 ms
(;;)61.2 194.9 ms
(;; data_mat: all the new branching ratios are concatenated into data_mat.)61.2 184.9 ms
(;;)61.2 174.9 ms
(;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;)61.2 164.9 ms
(;;;;;;;;)61.2 154.9 ms
(;;AN EXAMPLE: Let's assume that we are exciting from level 2 into level 10 \(dxl=2;dxu=)61.2 144.9 ms
(10\))61.2 134.9 ms
(;;             and there are only 13 total levels.)61.2 124.9 ms
(;;)61.2 114.9 ms
(;;  BEGIN LOOP)61.2 104.9 ms
(;;)61.2 94.9 ms
(;;      temp_mat1 = [ 10  11  Br_10,11])61.2 84.9 ms
(;;)61.2 74.9 ms
(;;      temp_mat2 = [ 11  12  Br_11,12)61.2 64.9 ms
(;;                    11  13  Br_11,13])61.2 54.9 ms
(;;)61.2 44.9 ms
re sp
%%PageTrailer
%%Page: 3 3
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(brat.pro                                                                        Page 3)61.2 744.9 ms
F0 sf
0.251 0.251 0 r
(;;calculate new branching ratios, ' indicates a newly calculated branch)61.2 724.9 ms
(;;)61.2 714.9 ms
(;;      temp_mat2 = [ 10  12  Br_10,12')61.2 704.9 ms
(;;                    10  13  Br_10,13'])61.2 694.9 ms
(;;)61.2 684.9 ms
(;;      store branching ratios into data_mat)61.2 674.9 ms
(;;)61.2 664.9 ms
(;;      data_mat =  [ 10  11   Br_10,11)61.2 654.9 ms
(;;                    10  12   Br_10,12')61.2 644.9 ms
(;;                    10  13   Br_10,13'])61.2 634.9 ms
(;;)61.2 624.9 ms
(;;the next loop requires temp_mat1 has an upper level of 12)61.2 614.9 ms
(;;store everything from data_mat with an upper level of 12)61.2 604.9 ms
(;;in temp_mat3, assuming that these new ratios are gt zzero)61.2 594.9 ms
(;;)61.2 584.9 ms
(;;      temp_mat3 =  [10  12   Br_10,12'])61.2 574.9 ms
(;;)61.2 564.9 ms
(;;  LOOP)61.2 554.9 ms
(;;)61.2 544.9 ms
(;;temp_mat1 will now check temp_mat3 AND ratio_mat for upper levels = 12)61.2 534.9 ms
(;;)61.2 524.9 ms
(;;      temp_mat1 =  [10  12   Br_10,12     <------ this one's in ratio_mat)61.2 514.9 ms
(;;                    10  12   Br_10,12']   <------ this one's in temp_mat3)61.2 504.9 ms
(;;                                                 from previous loop)61.2 494.9 ms
(;;)61.2 484.9 ms
(;;      temp_mat2 =  [12  13   Br_12,13])61.2 474.9 ms
(;;)61.2 464.9 ms
(;;caluculate new branching ratios)61.2 454.9 ms
(;;)61.2 444.9 ms
(;;      temp_mat2 = [ 10  13  Br_10,13'')61.2 434.9 ms
(;;                    10  13  Br_10,13''])61.2 424.9 ms
(;;)61.2 414.9 ms
(;;cat ratios from last loop with new  branching ratios into data_mat)61.2 404.9 ms
(;;)61.2 394.9 ms
(;;      data_mat =  [ 10  11   Br_10,11)61.2 384.9 ms
(;;                    10  12   Br_10,12')61.2 374.9 ms
(;;                    10  13   Br_10,13')61.2 364.9 ms
(;;                    10  13   Br_10_13''   <------ These two are DIFFERENT branches)61.2 354.9 ms
(;;                    10  13   Br_10,13'']  <------ calculated in loop 2)61.2 344.9 ms
(;;)61.2 334.9 ms
(;;      temp_mat3 = [ 10  13   Br_10,13')61.2 324.9 ms
(;;                    10  13   Br_10,13'')61.2 314.9 ms
(;;                    10  13   Br_10,13''])61.2 304.9 ms
(;;)61.2 294.9 ms
(;;  LOOP   \(this last loop only pulls out the last braching ratio --> Br_10,last_level)61.2 284.9 ms
(;;)61.2 274.9 ms
(;;)61.2 264.9 ms
(;;      data_mat =  [ 10  11   Br_10,11)61.2 254.9 ms
(;;                    10  12   Br_10,12)61.2 244.9 ms
(;;                    10  13   Br_10,13)61.2 234.9 ms
(;;                    10  12   Br_10,12')61.2 224.9 ms
(;;                    10  13   Br_10,13')61.2 214.9 ms
(;;                    10  13   Br_10,13'')61.2 204.9 ms
(;;                    10  13   Br_10,13''])61.2 194.9 ms
(;;)61.2 184.9 ms
(;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;)61.2 174.9 ms
(;;;;;;;;;;;;)61.2 164.9 ms
(;;)61.2 154.9 ms
(;; There is only one branch from 10 to 11)61.2 144.9 ms
(;; There are two branches from 10 to 12)61.2 134.9 ms
(;; There are four branches from 10 to 13)61.2 124.9 ms
(;;)61.2 114.9 ms
(;; 11  12  13   12  13  13  13)61.2 104.9 ms
(;; 10  10  10   11  12  11  12)61.2 94.9 ms
(;;              10  10  10  11)61.2 84.9 ms
(;;                          10)61.2 74.9 ms
(;;)61.2 64.9 ms
(;;  data_mat stores all of them.)61.2 54.9 ms
(;;)61.2 44.9 ms
re sp
%%PageTrailer
%%Page: 4 4
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(brat.pro                                                                        Page 4)61.2 744.9 ms
F0 sf
0.251 0.251 0 r
(;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;)61.2 724.9 ms
(;;;;;;;;;;;;;)61.2 714.9 ms
0 0.125 0.251 r
(for)61.2 694.9 ms
0 g
( i=)s
0 0.251 0 r
(1)s
0 g
(,last_level-dxu )s
0 0.125 0.251 r
(do)s
0 g
( )s
0 0.125 0.251 r
(begin)s
0 g
(    indx2 = )61.2 684.9 ms
0 0.251 0 r
(where)s
0 g
(\(ratio_mat\()s
0 0.251 0 r
(0)s
0 g
(,*\))s
0 0.125 0.251 r
( eq )s
0 g
(dxu)s
0 0.125 0.251 r
( and )s
0 g
(ratio_mat\()s
0 0.251 0 r
(1)s
0 g
(,*\))s
0 0.125 0.251 r
( eq )s
0 g
(dxu+i\))s
(       )61.2 674.9 ms
0 0.125 0.251 r
(if)s
0 g
(\(isa\(temp_mat3,)s
0.376 0 0.376 r
(/ARRAY)s
0 g
(\)\) )s
0 0.125 0.251 r
(then)s
0 g
( )s
0 0.125 0.251 r
(begin)s
0 g
(            temp_mat1=[[ratio_mat\(*,indx2\)],[temp_mat3]])61.2 664.9 ms
(            )61.2 654.9 ms
0 0.251 0 r
(print)s
0 g
(, temp_mat3)s
(       )61.2 644.9 ms
0 0.125 0.251 r
(endif)s
0 g
( )s
0 0.125 0.251 r
(else)s
0 g
( )s
0 0.125 0.251 r
(begin)s
0 g
(            )61.2 634.9 ms
0 0.251 0 r
(print)s
0 g
(,)s
0 0.251 0 r
('no temp_mat3!!!!!')s
0 g
(               temp_mat1=ratio_mat\(*,indx2\))61.2 624.9 ms
(       )61.2 614.9 ms
0 0.125 0.251 r
(endelse)s
0 g
(       indx2=)61.2 594.9 ms
0 0.251 0 r
(where)s
0 g
(\(ratio_mat\()s
0 0.251 0 r
(0)s
0 g
(,*\))s
0 0.125 0.251 r
( eq )s
0 g
(dxu+i\))s
(       temp_mat2=ratio_mat\(*,indx2\))61.2 584.9 ms
(    )61.2 564.9 ms
0 0.251 0 r
(print)s
0 g
(,)s
0 0.251 0 r
('temp_mat3 top')s
0 g
(    )61.2 544.9 ms
0 0.125 0.251 r
(for)s
0 g
( j = )s
0 0.251 0 r
(0)s
0 g
(,)s
0 0.251 0 r
(n_elements)s
0 g
(\(temp_mat1\()s
0 0.251 0 r
(0)s
0 g
(,*\)\)-)s
0 0.251 0 r
(1)s
0 g
( )s
0 0.125 0.251 r
(do)s
0 g
( )s
0 0.125 0.251 r
(begin)s
0 g
(        )61.2 534.9 ms
0 0.125 0.251 r
(for)s
0 g
( k = )s
0 0.251 0 r
(0)s
0 g
(,)s
0 0.251 0 r
(n_elements)s
0 g
(\(temp_mat2\()s
0 0.251 0 r
(0)s
0 g
(,*\)\)-)s
0 0.251 0 r
(1)s
0 g
( )s
0 0.125 0.251 r
(do)s
0 g
( )s
0 0.125 0.251 r
(begin)s
0 g
(            temp_mat2\()61.2 524.9 ms
0 0.251 0 r
(2)s
0 g
(,k\) = temp_mat2\()s
0 0.251 0 r
(2)s
0 g
(,k\) * temp_mat1\()s
0 0.251 0 r
(2)s
0 g
(,j\))s
(        )61.2 514.9 ms
0 0.125 0.251 r
(endfor)s
0 g
(        temp_mat2\()61.2 504.9 ms
0 0.251 0 r
(0)s
0 g
(,*\)=temp_mat1\()s
0 0.251 0 r
(0)s
0 g
(,)s
0 0.251 0 r
(0)s
0 g
(\))s
(         )61.2 494.9 ms
0 0.125 0.251 r
(if)s
0 g
(\(isa\(data_mat,)s
0.376 0 0.376 r
(/ARRAY)s
0 g
(\)\) )s
0 0.125 0.251 r
(then)s
0 g
( )s
0 0.125 0.251 r
(begin)s
0 g
(            data_mat=[[temp_mat1\(*,j\)],[temp_mat2],[data_mat]])61.2 484.9 ms
(         )61.2 474.9 ms
0 0.125 0.251 r
(endif)s
0 g
( )s
0 0.125 0.251 r
(else)s
0 g
( )s
0 0.125 0.251 r
(begin)s
0 g
(            data_mat=[[temp_mat1\(*,j\)],[temp_mat2]])61.2 464.9 ms
(         )61.2 454.9 ms
0 0.125 0.251 r
(endelse)s
0 g
(    )61.2 444.9 ms
0 0.125 0.251 r
(endfor)s
0 g
(    )61.2 404.9 ms
0 0.251 0 r
(delvar)s
0 g
(,temp_mat3, temp_mat1, temp_mat2)s
(    indx4=)61.2 384.9 ms
0 0.251 0 r
(where)s
0 g
(\(data_mat\()s
0 0.251 0 r
(1)s
0 g
(,*\))s
0 0.125 0.251 r
( eq )s
0 0.251 0 r
(float)s
0 g
(\(dxu+i\))s
0 0.125 0.251 r
( and )s
0 g
(data_mat\()s
0 0.251 0 r
(2)s
0 g
(,*\))s
0 0.125 0.251 r
( ge )s
0 g
(zzero\))s
(    )61.2 374.9 ms
0 0.251 0 r
(print)s
0 g
(, data_mat\(*, indx4\))s
(    )61.2 354.9 ms
0 0.125 0.251 r
(if)s
0 g
(\(indx4\()s
0 0.251 0 r
(0)s
0 g
(\))s
0 0.125 0.251 r
( ge )s
0 0.251 0 r
(0)s
0 g
(\) )s
0 0.125 0.251 r
(then)s
0 g
( )s
0 0.125 0.251 r
(begin)s
0 g
(        temp_mat3=data_mat\(*,indx4\))61.2 344.9 ms
(    )61.2 334.9 ms
0 0.125 0.251 r
(endif)s
0 g
(    )61.2 314.9 ms
0 0.125 0.251 r
(if)s
0 g
(\(isa\(temp_mat3,)s
0.376 0 0.376 r
(/ARRAY)s
0 g
(\)\) )s
0 0.125 0.251 r
(then)s
0 g
( )s
0 0.125 0.251 r
(begin)s
0 g
(         )61.2 304.9 ms
0 0.251 0 r
(print)s
0 g
(, dxu + i)s
(         )61.2 294.9 ms
0 0.251 0 r
(print)s
0 g
(,)s
0 0.251 0 r
('temp_mat3 bottom')s
0 g
(         )61.2 284.9 ms
0 0.251 0 r
(print)s
0 g
(,temp_mat3)s
(    )61.2 274.9 ms
0 0.125 0.251 r
(endif)s
(endfor)61.2 264.9 ms
0 0.251 0 r
(stop)61.2 244.9 ms
0.251 0.251 0 r
(;; This next loop sorts the data_mat array)61.2 214.9 ms
0 g
(indx2 = )61.2 194.9 ms
0 0.251 0 r
(where)s
0 g
(\(data_mat\()s
0 0.251 0 r
(2)s
0 g
(,*\))s
0 0.125 0.251 r
( gt )s
0 g
(zzero\))s
(data_mat=data_mat\(*,indx2\))61.2 184.9 ms
(sort_indx=)61.2 174.9 ms
0 0.251 0 r
(sort)s
0 g
(\(data_mat\()s
0 0.251 0 r
(1)s
0 g
(,*\)\))s
(data_mat=data_mat\(*,sort_indx\))61.2 164.9 ms
0.251 0.251 0 r
(;print,'data_mat')61.2 124.9 ms
(;print,data_mat)61.2 114.9 ms
(;; We only need the sum of all the braches with a common upper level.)61.2 94.9 ms
(;; These sums are stored in branch_mat.)61.2 84.9 ms
(;;)61.2 74.9 ms
(;; data_mat   = ALL non-zzero branches)61.2 64.9 ms
(;; branch_mat = array of the sum of branches with a common upper level,)61.2 54.9 ms
(;;              sorted by upper level.)61.2 44.9 ms
re sp
%%PageTrailer
%%Page: 5 5
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(brat.pro                                                                        Page 5)61.2 744.9 ms
F0 sf
(branch_mat=)61.2 714.9 ms
0 0.251 0 r
(fltarr)s
0 g
(\()s
0 0.251 0 r
(2)s
0 g
(,last_level\))s
(branch_mat\()61.2 704.9 ms
0 0.251 0 r
(0)s
0 g
(,)s
0 0.251 0 r
(0)s
0 g
(\) = dxu)s
(branch_mat\()61.2 694.9 ms
0 0.251 0 r
(1)s
0 g
(,)s
0 0.251 0 r
(0)s
0 g
(\) = )s
0 0.251 0 r
(1.0)s
0 0.125 0.251 r
(for)61.2 674.9 ms
0 g
( i=)s
0 0.251 0 r
(1)s
0 g
(,last_level-dxu )s
0 0.125 0.251 r
(do)s
0 g
( )s
0 0.125 0.251 r
(begin)s
0 g
(    indx2 = )61.2 664.9 ms
0 0.251 0 r
(where)s
0 g
(\(data_mat\()s
0 0.251 0 r
(1)s
0 g
(,*\))s
0 0.125 0.251 r
( eq )s
0 g
(dxu + i\))s
(    branch_mat\()61.2 654.9 ms
0 0.251 0 r
(0)s
0 g
(,i\) = dxu+i)s
(     )61.2 644.9 ms
0 0.125 0.251 r
(if)s
0 g
(\(indx2\()s
0 0.251 0 r
(0)s
0 g
(\))s
0 0.125 0.251 r
( ge )s
0 0.251 0 r
(0)s
0 g
(\) )s
0 0.125 0.251 r
(then)s
0 g
( )s
0 0.125 0.251 r
(begin)s
0 g
(        branch_mat\()61.2 634.9 ms
0 0.251 0 r
(1)s
0 g
(,i\)=)s
0 0.251 0 r
(total)s
0 g
(\(data_mat\()s
0 0.251 0 r
(2)s
0 g
(,indx2\)\))s
(     )61.2 624.9 ms
0 0.125 0.251 r
(endif)s
(endfor)61.2 614.9 ms
0.251 0.251 0 r
(;; print data to file)61.2 584.9 ms
0 0.251 0 r
(print)61.2 564.9 ms
0 g
(, )s
0 0.251 0 r
('branch_mat')s
(print)61.2 554.9 ms
0 g
(,branch_mat)s
(string1=)61.2 534.9 ms
0 0.251 0 r
(strcompress)s
0 g
(\()s
0 0.251 0 r
(string)s
0 g
(\(dxl\)\))s
0 0.251 0 r
(strput)61.2 524.9 ms
0 g
(, string1, )s
0 0.251 0 r
('_')s
0 g
(, )s
0 0.251 0 r
(0)s
0 g
(string2 = )61.2 514.9 ms
0 0.251 0 r
(strcompress)s
0 g
(\()s
0 0.251 0 r
(string)s
0 g
(\(dxu\)\))s
0 0.251 0 r
(strput)61.2 504.9 ms
0 g
(, string2, )s
0 0.251 0 r
('_')s
0 g
(, )s
0 0.251 0 r
(0)s
0 g
(filestring = )61.2 494.9 ms
0 0.251 0 r
('bratio')s
0 g
( + string1 + string2)s
0 0.251 0 r
(openw)61.2 474.9 ms
0 g
(,)s
0 0.251 0 r
(19)s
0 g
(,)s
0 0.251 0 r
('rawdata.dat')s
(printf)61.2 464.9 ms
0 g
(,)s
0 0.251 0 r
(19)s
0 g
(,data_mat,)s
0.376 0 0.376 r
(format=)s
0 0.251 0 r
('\(1i3,3x,1e12.4\)')s
(close)61.2 454.9 ms
0 g
(,)s
0 0.251 0 r
(19)s
(openw)61.2 444.9 ms
0 g
(,)s
0 0.251 0 r
(27)s
0 g
(,filestring)s
0 0.251 0 r
(printf)61.2 434.9 ms
0 g
(,)s
0 0.251 0 r
(27)s
0 g
(,)s
0 0.251 0 r
('## NTRMN=')s
0 g
(,)s
0 0.251 0 r
(fix)s
0 g
(\(indx_trans\))s
0 0.251 0 r
(printf)61.2 424.9 ms
0 g
(,)s
0 0.251 0 r
(27)s
0 g
(,)s
0 0.251 0 r
('## NTRANS=')s
0 g
(,)s
0 0.251 0 r
(fix)s
0 g
(\(indx_trans_final\))s
0 0.251 0 r
(printf)61.2 414.9 ms
0 g
(,)s
0 0.251 0 r
(27)s
0 g
(,branch_mat,)s
0.376 0 0.376 r
(format=)s
0 0.251 0 r
('\(1i3,3x,1e12.4\)')s
(close)61.2 404.9 ms
0 g
(,)s
0 0.251 0 r
(27)s
(print)61.2 384.9 ms
0 g
(, )s
0 0.251 0 r
('Data file written to ')s
0 g
(, filestring)s
0 0.251 0 r
(print)61.2 374.9 ms
0 g
(, )s
0 0.251 0 r
('Program ending!!!!')s
(print)61.2 364.9 ms
0 g
(, )s
0 0.251 0 r
('type .c to exit \(erases all stored matrices\)')s
(stop)61.2 354.9 ms
(print)61.2 334.9 ms
0 g
(,)s
0 0.251 0 r
('indx_col,=')s
0 g
(,)s
0 0.251 0 r
(fix)s
0 g
(\(indx_trans\))s
0 0.251 0 r
(print)61.2 324.9 ms
0 g
(,)s
0 0.251 0 r
('NTRMN=')s
0 g
(,)s
0 0.251 0 r
(fix)s
0 g
(\(indx_trans\))s
0 0.251 0 r
(print)61.2 314.9 ms
0 g
(,)s
0 0.251 0 r
('NTRANS=')s
0 g
(,)s
0 0.251 0 r
(fix)s
0 g
(\(indx_trans_final\))s
0 0.125 0.251 r
(END)61.2 304.9 ms
re sp
%%PageTrailer
%%Trailer
%%Pages: 5
%%EOF
